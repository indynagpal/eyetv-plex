#!/usr/bin/env ruby
require 'plist'
require 'pathname'
require 'fileutils'

class EyeTVScanTask
  EYETV_FOLDER = ENV['EYETV_ARCHIVE'] || "#{ENV['HOME']}/Documents/EyeTV Archive"
  PLEX_FOLDER  = ENV['PLEX_FOLDER'] || "#{ENV['HOME']}/Movies/TV\ Recordings"

  def run
    recordings.select(&:done?).each do |recording|
      dest = recording.destination(Pathname.new(PLEX_FOLDER))
      if dest.symlink?
        if dest.readlink != recording.media_file
          dest = recording.destination(Pathname.new(PLEX_FOLDER), true)
        end
      end

      unless dest.symlink?
        puts "New Recording: #{dest.basename}"
        FileUtils.mkdir_p dest.dirname
        dest.make_symlink(recording.media_file)
      end
    end
  end

  def children_with(path, ext)
    path.children.select {|n| n.basename.to_s.end_with?(ext) }
  end

  def recordings
    children_with(Pathname.new(EYETV_FOLDER), '.eyetv').
      reject {|d| d == "Live TV Buffer.eyetv" }.
      map {|dir| recordings_in(dir) }.flatten
    end

  def recordings_in(dir)
    children_with(dir, '.iPad.m4v').map {|file| Recording.new(file) }
  end
end

class Recording
  attr_accessor :media_file

  def initialize(file)
    @media_file = Pathname.new(file)
  end

  def locate(ext)
    Pathname.new(@media_file.to_s.sub(/\.iPad\.m4v$/, ext))
  end

  def done?
    !media_file.basename.to_s.start_with?("busy_")
  end

  def metadata
    @plist ||= Plist::parse_xml(locate('.eyetvr'))
  end

  def title
    metadata['info']['recording title']
  end

  def subtitle
    metadata['info']['episode title'] || ''
  end

  def date
    metadata['info']['start']
  end

  def year
    date.year
  end

  def destination(base, alternate = false)
    base.join(title, year.to_s, plex_filename(alternate))
  end

  def escape(string)
    string.gsub(/\//, ':')
  end

  def plex_filename(alternate = false)
    name = "#{escape(title)} - #{date.strftime('%Y-%m-%d')}"
    if alternate
      name << " - #{media_file.basename.sub(/.iPad\.m4v$/, '')}"
    elsif !subtitle.empty?
      name << " - #{escape(subtitle)}"
    end
    name << media_file.extname
  end
end

EyeTVScanTask.new.run
